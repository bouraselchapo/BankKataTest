////////////////////////////////////////////////////////////////////
//
// File: AccountTransferTest.java
// Created: 15 août 2017 09:37:15
// Author: PHBS06171
//
////////////////////////////////////////////////////////////////////

package com.bank.account.acceptanceTest;

import static org.fest.assertions.Assertions.assertThat;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Iterator;
import java.util.Set;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.bank.account.domaine.Account;
import com.bank.account.domaine.Transaction;
import com.bank.account.domaine.TransactionType;
import com.bank.account.service.AccountService;
import com.bank.account.test.builders.AccountBuilder;
import com.bank.account.test.conf.AppTestConfig;

/**
 * Acceptance test for transfer part business requirement :
 * 
 * ● Write some code to transfer a specified amount of money from one bank account (the payer) to
 * another (the payee) ● Write some code to keep a record of the transfer for both bank accounts in
 * a transaction history ● Write some code to query a bank account's transaction history for any
 * bank transfers to or from a specific account
 *
 * @author PHBS06171
 *
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(loader = AppTestConfig.class)
public class AccountTransferAcceptanceTest {

  @Autowired
  AccountService accountService;

  @Test
  public void transferAmount() {
    // Creation of the needed accounts.
    final Account sourceAccount =
        AccountBuilder.getBuilder().clientUID("AQZ4444447").clientName("John").build();

    final Account destinationAccount =
        AccountBuilder.getBuilder().clientUID("ZXF2111116").clientName("John").build();

    // Depose some money to the source account.
    accountService.depositAmount(LocalDateTime.now(), sourceAccount, new BigDecimal(5000));

    // transfer the money from the source account to destination.
    accountService.transferMoney(LocalDateTime.now(), sourceAccount, destinationAccount,
        new BigDecimal(1000));

    // Test the transactions trace for the source Account.
    final Set<Transaction> sourceTransactionHistory =
        accountService.getTransactionsHistory(sourceAccount);

    assertThat(sourceTransactionHistory.size()).isEqualTo(2);

    final Iterator<Transaction> it = sourceTransactionHistory.iterator();
    it.next();
    final Transaction transferFromTransaction = it.next();
    assertThat(transferFromTransaction.getAccount()).isEqualTo(sourceAccount);
    assertThat(transferFromTransaction.getAmount()).isEqualTo(new BigDecimal(1000));
    assertThat(transferFromTransaction.getTransactionType())
    .isEqualTo(TransactionType.TRANSFER_FROM);

    // Test the transactions trace for the destination Account.
    final Set<Transaction> destinationTransactionHistory =
        accountService.getTransactionsHistory(destinationAccount);

    assertThat(destinationTransactionHistory.size()).isEqualTo(1);

    final Transaction transferToTransaction = destinationTransactionHistory.iterator().next();
    assertThat(transferToTransaction.getAccount()).isEqualTo(destinationAccount);
    assertThat(transferToTransaction.getAmount()).isEqualTo(new BigDecimal(1000));
    assertThat(transferToTransaction.getTransactionType()).isEqualTo(TransactionType.TRANSFER_TO);
  }

}
